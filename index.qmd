---
title: "Chocolate Chip Cookies"
execute:
  error: true
author: "Josh Bugay"
output: html_document
---

## Reading In the Data

First, read in the CSV data of cookie ingredients.
Make sure that your end-result data has appropriate types for each column - these should match the types provided in the documentation in the README.md file.

```{r}
#install.packages("dplyr")
library(dplyr)
ingredients <- read.csv("choc_chip_cookie_ingredients.csv", header = TRUE)
ingredients <- ingredients %>% select(-X) #This takes out the additional index column that we is irrelevant
head(ingredients %>% arrange(Recipe_Index))
tail(ingredients) 
```

```{python}
import pandas as pd
ingredients = pd.read_csv("choc_chip_cookie_ingredients.csv", index_col=0) #index_col drops index column upon read
print(ingredients.head)
ingredients = pd.DataFrame(ingredients)
```


## Exploratory Data Analysis

Exploratory data analysis is the process of getting familiar with your dataset. To get started, [this blog post](https://www.mrdbourke.com/a-gentle-introduction-to-exploratory-data-analysis/) provides a nice checklist to get you thinking:

> 1.  What question(s) are you trying to solve (or prove wrong)?
> 2.  What kind of data do you have and how do you treat different types?
> 3.  What's missing from the data and how do you deal with it?
> 4.  Where are the outliers and why should you care about them?
> 5.  How can you add, change or remove features to get more out of your data?

### Generating Questions

Generate at least 5 questions you might explore using this database of cookie ingredients.

1. What should the bounds for my outliers be
2. Are there any values that have different units than in other recipes
3. What is the average of each ingredient over all of the recipes
4. How do I fill in values/account for outlier ingredients
5. What are the most common 5 ingredients


### Skimming the Data

One thing we often want to do during EDA is to examine the quality of the data - are there missing values? What quirks might exist in the dataset?

The `skimr` package in R, and the similar `skimpy` package in python (which has a much better name, in my opinion), can help provide visual summaries of the data. 

Install both packages, and read the package documentation ([R](https://cran.r-project.org/web/packages/skimr/vignettes/skimr.html), [Python](https://pypi.org/project/skimpy/)).

[Part 1] Use each package and generate summaries of your data that require the use of at least some non-default options in each package's `skim` function.


```{r}
##install.packages('skimr')
library(skimr)
??skimr
skim(ingredients) %>%
  tibble::as_tibble()
```

```{python}
from skimpy import skim
skim(ingredients)
```

[Part 2] Write 1-2 sentences about what you can tell from each summary display you generate. Did you discover anything new about the data?

### Generating Tables

Another useful technique for exploratory data analysis is to generate summary tables. 
You may want to use the `dplyr` package in R (`group_by` or `count` functions), as well as the `groupby` and `count` methods in Pandas. [Python example](https://sparkbyexamples.com/pandas/pandas-groupby-count-examples/), [R example](https://dplyr.tidyverse.org/reference/count.html)

[Part 1] Using R and Python, generate a table that shows what **proportion** of recipes contain each type of ingredient, for the most common 20 ingredients.
```{r}
library(dplyr)
summary(ingredients$Recipe_Index)
recip_unique <- length(unique(ingredients$Recipe_Index))
recip_count <- count(ingredients, Ingredient, sort = TRUE)
recip_count <- recip_count[1:20,] # vector of 20 most common ingredients and their counts
num_recip <- count(ingredients, Recipe_Index) 
num_recip <- length(num_recip$n) # number of recipes
recip_prop <- recip_count %>% mutate(n = n/num_recip)
## egg is greater than 1.00 because egg yolk gets listed as egg in the ingredients df, plus similar errors in other ingredients possibly

```


```{python}


```
[Part 2] Print out a character string that lists all of the ingredients that do not appear in at least 20 recipes.


(Delete this note, but you can include data values inline in markdown text by using backticks, at least in R. For instance, here is R's built in value for pi: `r pi`. Unfortunately, this doesn't work in python using the knitr markdown engine, but you can print the list out in python anyways using a code chunk.)

### Visualization

Using whatever plotting system you are comfortable with in R or python, see if you can create a couple of useful exploratory data visualizations which address one of the questions you wrote above - or another question which you've come up with as you've worked on this assignment.

[Part 1] Create at least one plot (it doesn't have to be pretty) that showcases an interesting facet of the data.

[Part 2] Write 2-3 sentences about what you can learn from that plot and what directions you might want to investigate from here.
